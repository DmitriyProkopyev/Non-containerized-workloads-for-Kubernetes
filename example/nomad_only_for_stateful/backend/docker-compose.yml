services:
  zookeeper:
    image: zookeeper:latest
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks:
      - app-network

#  kafka:
#    image: bitnami/kafka:latest
#    environment:
#      - KAFKA_CFG_NODE_ID=0
#      - KAFKA_CFG_PROCESS_ROLES=broker,controller
#      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
#      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
#      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
#      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
#      - KAFKA_KRAFT_CLUSTER_ID=jDI0zk1hRHeyq6dxPh7FzA
#    volumes:
#      - kafka_data:/bitnami/kafka
#    ports:
#      - 9092:9092
#    healthcheck:
#      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 15s
#    networks:
#      - app-network

#  mongo:
#    image: mongo:latest
#    ports:
#      - "27017:27017"
#    volumes:
#      - mongo_data:/data/db
#    restart: unless-stopped
#    networks:
#      - app-network

  jaeger:
    image: jaegertracing/all-in-one:1.52
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
      - "6831:6831"    # UDP agent
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ../frontend
      dockerfile: ../frontend/Dockerfile
    volumes:
      - ../frontend/build:/usr/share/nginx/html
    restart: unless-stopped
    networks:
      - app-network

  backend:
    build: .
    ports:
      - "8000:80"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MONGO_URI=mongodb://95.164.91.63:27017
      - MONGO_DB_NAME=testdb
      - OTEL_SERVICE_NAME=backend
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
#      kafka:
#        condition: service_healthy
#      mongo:
#        condition: service_started
      jaeger:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    image: nginx:latest
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ../frontend/build:/usr/share/nginx/html
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - app-network

volumes:
#  mongo_data:
  kafka_data:

networks:
  app-network:
    driver: bridge
